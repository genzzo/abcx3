{"version":3,"file":"main.js","mappings":"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","sources":["webpack://prisma-utils/./apps/api/src/app/app.controller.ts","webpack://prisma-utils/./apps/api/src/app/app.module.ts","webpack://prisma-utils/./apps/api/src/app/app.service.ts","webpack://prisma-utils/./libs/nestjs-prisma/src/index.ts","webpack://prisma-utils/./libs/nestjs-prisma/src/lib/constants.ts","webpack://prisma-utils/./libs/nestjs-prisma/src/lib/prisma.module.ts","webpack://prisma-utils/./libs/nestjs-prisma/src/lib/prisma.service.ts","webpack://prisma-utils/./libs/request-parser/src/index.ts","webpack://prisma-utils/./libs/request-parser/src/lib/decorators/request-parser.decorator.ts","webpack://prisma-utils/./libs/request-parser/src/lib/services/request-parser.service.ts","webpack://prisma-utils/external commonjs \"@nestjs/common\"","webpack://prisma-utils/external commonjs \"@nestjs/core\"","webpack://prisma-utils/external commonjs \"@prisma/client\"","webpack://prisma-utils/external commonjs \"tslib\"","webpack://prisma-utils/webpack/bootstrap","webpack://prisma-utils/./apps/api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\nimport {\r\n  ParsedQueryModel,\r\n  RequestParser,\r\n} from '@prisma-utils/nestjs-request-parser';\r\n\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getData(@RequestParser() params: ParsedQueryModel) {\r\n    console.log(params);\r\n    return this.appService.getData();\r\n  }\r\n\r\n  @Get('count')\r\n  getCount() {\r\n    return this.appService.getCount();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { PrismaModule } from '@prisma-utils/nestjs-prisma';\r\n\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\n\r\n@Module({\r\n  imports: [\r\n    PrismaModule.forRoot({\r\n      isGlobal: true,\r\n      prismaServiceOptions: {\r\n        middlewares: [\r\n          async (params, next) => {\r\n            const before = Date.now();\r\n            const result = await next(params);\r\n            const after = Date.now();\r\n\r\n            console.log(\r\n              `Query ${params.model}.${params.action} took ${after - before}ms`,\r\n            );\r\n\r\n            return result;\r\n          },\r\n        ],\r\n      },\r\n    }),\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { PrismaService } from '@prisma-utils/nestjs-prisma';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  constructor(private prismaService: PrismaService) {}\r\n\r\n  getData() {\r\n    return { message: `Welcome to api!` };\r\n  }\r\n\r\n  async getCount() {\r\n    const count = this.prismaService.article.count();\r\n    return count;\r\n  }\r\n}\r\n","export * from './lib/prisma.service';\r\nexport * from './lib/prisma.module';\r\nexport * from './lib/interfaces/pagination.interface';\r\n","export const PRISMA_SERVICE_OPTIONS = 'PRISMA_SERVICE_OPTIONS';\r\nexport const PRISMA_EXPLICIT_CONNECT = 'PRISMA_EXPLICIT_CONNECT';\r\n","import { DynamicModule, Module, Provider } from '@nestjs/common';\r\nimport {\r\n  PrismaModuleAsyncOptions,\r\n  PrismaModuleOptions,\r\n  PrismaOptionsFactory,\r\n} from './interfaces/prisma-module.options';\r\nimport { PRISMA_SERVICE_OPTIONS } from './constants';\r\nimport { PrismaService } from './prisma.service';\r\n\r\n@Module({\r\n  providers: [PrismaService],\r\n  exports: [PrismaService],\r\n})\r\nexport class PrismaModule {\r\n  static forRoot(options: PrismaModuleOptions = {}): DynamicModule {\r\n    return {\r\n      global: options.isGlobal,\r\n      module: PrismaModule,\r\n      providers: [\r\n        {\r\n          provide: PRISMA_SERVICE_OPTIONS,\r\n          useValue: options.prismaServiceOptions,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  static forRootAsync(options: PrismaModuleAsyncOptions): DynamicModule {\r\n    return {\r\n      global: options.isGlobal,\r\n      module: PrismaModule,\r\n      imports: options.imports || [],\r\n      providers: this.createAsyncProviders(options),\r\n    };\r\n  }\r\n\r\n  private static createAsyncProviders(\r\n    options: PrismaModuleAsyncOptions,\r\n  ): Provider[] {\r\n    if (options.useExisting || options.useFactory) {\r\n      return this.createAsyncOptionsProvider(options);\r\n    }\r\n\r\n    if (options.useClass) {\r\n      return [\r\n        ...this.createAsyncOptionsProvider(options),\r\n        {\r\n          provide: options.useClass,\r\n          useClass: options.useClass,\r\n        },\r\n      ];\r\n    }\r\n    return [...this.createAsyncOptionsProvider(options)];\r\n  }\r\n\r\n  private static createAsyncOptionsProvider(\r\n    options: PrismaModuleAsyncOptions,\r\n  ): Provider[] {\r\n    if (options.useFactory) {\r\n      return [\r\n        {\r\n          provide: PRISMA_SERVICE_OPTIONS,\r\n          useFactory: options.useFactory,\r\n          inject: options.inject || [],\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (options.useExisting) {\r\n      return [\r\n        {\r\n          provide: PRISMA_SERVICE_OPTIONS,\r\n          useFactory: async (optionsFactory: PrismaOptionsFactory) =>\r\n            await optionsFactory.createPrismaOptions(),\r\n          inject: [options.useExisting],\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (options.useClass) {\r\n      return [\r\n        {\r\n          provide: PRISMA_SERVICE_OPTIONS,\r\n          useFactory: async (optionsFactory: PrismaOptionsFactory) =>\r\n            await optionsFactory.createPrismaOptions(),\r\n          inject: [options.useClass],\r\n        },\r\n      ];\r\n    }\r\n\r\n    return [\r\n      {\r\n        provide: PRISMA_SERVICE_OPTIONS,\r\n        useFactory: async (optionsFactory: PrismaOptionsFactory) =>\r\n          await optionsFactory.createPrismaOptions(),\r\n        inject: [],\r\n      },\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  INestApplication,\r\n  Inject,\r\n  Injectable,\r\n  OnModuleInit,\r\n  Optional,\r\n} from '@nestjs/common';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { PrismaServiceOptions } from './interfaces/prisma-module.options';\r\nimport { PRISMA_SERVICE_OPTIONS } from './constants';\r\n\r\n@Injectable()\r\nexport class PrismaService extends PrismaClient implements OnModuleInit {\r\n  constructor(\r\n    @Optional()\r\n    @Inject(PRISMA_SERVICE_OPTIONS)\r\n    private readonly prismaServiceOptions: PrismaServiceOptions = {},\r\n  ) {\r\n    super(prismaServiceOptions.prismaOptions);\r\n\r\n    if (this.prismaServiceOptions.middlewares) {\r\n      this.prismaServiceOptions.middlewares.forEach((middleware) =>\r\n        this.$use(middleware),\r\n      );\r\n    }\r\n  }\r\n\r\n  async onModuleInit() {\r\n    if (this.prismaServiceOptions.explicitConnect) {\r\n      await this.$connect();\r\n    }\r\n  }\r\n\r\n  async enableShutdownHooks(app: INestApplication) {\r\n    this.$on('beforeExit', async () => {\r\n      await app.close();\r\n    });\r\n  }\r\n}\r\n","export * from './lib/decorators/request-parser.decorator';\r\nexport * from './lib/models/parsed-query.model';\r\nexport * from './lib/models/request-query.options';\r\nexport * from './lib/services/request-parser.service';\r\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\r\nimport { RequestQueryOptions } from '../models/request-query.options';\r\n\r\nimport { RequestParserService } from '../services/request-parser.service';\r\n\r\nexport const RequestParser = createParamDecorator(\r\n  (data: Partial<RequestQueryOptions>, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    return new RequestParserService().parseQuery(request.query, data);\r\n  },\r\n);\r\n","import { BadRequestException } from '@nestjs/common';\r\n\r\nimport {\r\n  ParsedQueryModel,\r\n  ParsedQuerySortModel,\r\n} from '../models/parsed-query.model';\r\nimport { RequestQueryOptions } from '../models/request-query.options';\r\n\r\nconst defaultRequestQueryOptions: RequestQueryOptions = {\r\n  limitParamName: 'limit',\r\n  limitDefaultValue: 20,\r\n  maxLimit: 100,\r\n\r\n  filterParamName: 'filter',\r\n  filterDefaultValue: {},\r\n\r\n  pageParamName: 'page',\r\n  pageDefaultValue: 1,\r\n\r\n  orderParamName: 'sort',\r\n  orderDefaultValue: 'id',\r\n};\r\n\r\nexport class RequestParserService {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private query: any;\r\n  private options: RequestQueryOptions = defaultRequestQueryOptions;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  parseQuery(\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    query: any,\r\n    options: Partial<RequestQueryOptions> = {},\r\n  ): ParsedQueryModel {\r\n    if (typeof query !== 'object') {\r\n      throw new BadRequestException('Malformed QueryString');\r\n    }\r\n\r\n    this.options = { ...defaultRequestQueryOptions, ...options };\r\n\r\n    this.query = query;\r\n\r\n    const page = this.parsePage();\r\n    const limit = this.parseLimit();\r\n    const sort = this.parseSort();\r\n    const filter = this.parseFilter();\r\n\r\n    return {\r\n      page: page,\r\n      skip: this.calculateSkip(page, limit),\r\n      take: limit,\r\n      sort: sort,\r\n      filter: filter,\r\n    };\r\n  }\r\n\r\n  private parsePage(): number {\r\n    const pageRequestData = this.query[this.options.pageParamName];\r\n\r\n    const page = parseInt(pageRequestData) || this.options.pageDefaultValue;\r\n\r\n    if (page < 1) {\r\n      return this.options.pageDefaultValue;\r\n    }\r\n\r\n    return page;\r\n  }\r\n\r\n  private parseLimit(): number {\r\n    const limitRequestData = this.query[this.options.limitParamName];\r\n\r\n    let limit = parseInt(limitRequestData) || this.options.limitDefaultValue;\r\n\r\n    if (limit < 1) {\r\n      limit = this.options.limitDefaultValue;\r\n    }\r\n\r\n    if (limit > this.options.maxLimit) {\r\n      limit = this.options.maxLimit;\r\n    }\r\n\r\n    return limit;\r\n  }\r\n\r\n  private calculateSkip(page: number, limit: number): number {\r\n    return (page - 1) * limit;\r\n  }\r\n\r\n  private parseFilter(): object {\r\n    let filter: object = {};\r\n\r\n    const filterRequestData =\r\n      this.query[this.options.filterParamName] ||\r\n      this.options.filterDefaultValue;\r\n\r\n    try {\r\n      filter = JSON.parse(filterRequestData);\r\n    } catch (e) {\r\n      return filter;\r\n    }\r\n    return filter;\r\n  }\r\n\r\n  private parseSort(): ParsedQuerySortModel[] {\r\n    const sort: ParsedQuerySortModel[] = [];\r\n\r\n    const sortRequestData =\r\n      this.query[this.options.orderParamName] || this.options.orderDefaultValue;\r\n\r\n    const sortQuery = (sortRequestData as string).trim();\r\n\r\n    if (sortQuery !== undefined) {\r\n      if (sortQuery.length > 0) {\r\n        const sortParams = sortQuery.split(',');\r\n\r\n        for (let sortParam of sortParams) {\r\n          sortParam = sortParam.trim();\r\n          let sortDirection = 'asc' as 'asc' | 'desc' as 'desc';\r\n\r\n          if (sortParam.startsWith('-')) {\r\n            sortParam = sortParam.substring(1);\r\n            sortDirection = 'desc';\r\n          }\r\n\r\n          sort.push({ [sortParam]: sortDirection });\r\n        }\r\n      }\r\n    }\r\n\r\n    return sort;\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`,\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":["AppController","constructor","appService","getData","params","console","log","this","getCount","Get","RequestParser","ParsedQueryModel","Controller","AppService","AppModule","Module","imports","PrismaModule","forRoot","isGlobal","prismaServiceOptions","middlewares","next","before","Date","now","result","after","model","action","controllers","providers","prismaService","message","article","count","Injectable","PrismaService","PRISMA_SERVICE_OPTIONS","PRISMA_EXPLICIT_CONNECT","static","options","global","module","provide","useValue","createAsyncProviders","useExisting","useFactory","createAsyncOptionsProvider","useClass","inject","optionsFactory","createPrismaOptions","exports","PrismaClient","super","prismaOptions","forEach","middleware","$use","onModuleInit","explicitConnect","$connect","enableShutdownHooks","app","$on","close","Optional","Inject","PrismaServiceOptions","createParamDecorator","data","ctx","request","switchToHttp","getRequest","RequestParserService","parseQuery","query","defaultRequestQueryOptions","limitParamName","limitDefaultValue","maxLimit","filterParamName","filterDefaultValue","pageParamName","pageDefaultValue","orderParamName","orderDefaultValue","BadRequestException","page","parsePage","limit","parseLimit","sort","parseSort","filter","parseFilter","skip","calculateSkip","take","pageRequestData","parseInt","limitRequestData","filterRequestData","JSON","parse","e","sortQuery","trim","undefined","length","sortParams","split","sortParam","sortDirection","startsWith","substring","push","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","NestFactory","create","setGlobalPrefix","port","process","env","PORT","listen","Logger","bootstrap"],"sourceRoot":""}