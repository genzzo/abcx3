import { DMMF } from "@prisma/generator-helper";
import { PrismaHelper, StringFns } from "@shared";
import { DartGeneratorSettings } from "../dart_settings.interface";
import { dartStoreGetByPropertyVal, dartStoreGetVal, dartStoreStub } from "../stubs/store.stub";
import { get } from "http";
import { DartGenerator } from "./dart.generator";


export class DartStoreGenerator {

    private prismaHelper: PrismaHelper;
    private dartGenerator: DartGenerator;

    constructor(private settings: DartGeneratorSettings, private model: DMMF.Model) {
        this.prismaHelper = PrismaHelper.getInstance();
        this.dartGenerator = new DartGenerator(settings, model);
    }

    generateContent() {

        let content = dartStoreStub;

        content = content.replace(/#{AutoGeneratedWarningText}/g, this.settings.AutoGeneratedWarningText);
        content = content.replace(/#{Model}/g, this.model.name);

        let getValMethods = '';
        let getByPropertyVal$ = '';
        let getManyByPropertyVal$ = '';

        for (const field of this.model.fields) {

            getValMethods += this.generateGetValMethod(field);
            if (field.isUnique) {
                getByPropertyVal$ += this.generateGetByPropertyVal$(field);
            } else {
                getManyByPropertyVal$ += this.generateGetManyByPropertyVal$(field);
            }
        }

        content = content.replace(/#{GetValMethods}/g, getValMethods);
        content = content.replace(/#{GetByPropertyVal\$}/g, getByPropertyVal$);
        content = content.replace(/#{GetManyByPropertyVal\$}/g, getManyByPropertyVal$);

        return content;
    }


    generateGetValMethod(field: DMMF.Field) {
        const model = this.model.name;
        let content = dartStoreGetVal;
        content = content.replace(/#{FieldType}/g, this.dartGenerator.getDartType(field));
        content = content.replace(/#{fieldName}/g, field.name);
        content = content.replace(/#{FieldName}/g, StringFns.capitalize(field.name));
        content = content.replace(/#{model}/g, this.model.name);
        content = content.replace(/#{Model}/g, StringFns.capitalize(this.model.name));
        return content;
    }

    generateGetByPropertyVal$(field: DMMF.Field) {
        let content = dartStoreGetByPropertyVal;
        content = content.replace(/#{FieldType}/g, this.dartGenerator.getDartType(field));
        content = content.replace(/#{fieldName}/g, field.name);
        content = content.replace(/#{FieldName}/g, StringFns.capitalize(field.name));
        content = content.replace(/#{model}/g, this.model.name);
        content = content.replace(/#{Model}/g, StringFns.capitalize(this.model.name));
        return content;
    }

    generateGetManyByPropertyVal$(field: DMMF.Field) {
        throw new Error("Method not implemented.");
    }
}