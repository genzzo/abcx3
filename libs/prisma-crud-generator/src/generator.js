"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator_helper_1 = require("@prisma/generator-helper");
const package_json_1 = require("./../package.json");
const constants_1 = require("./constants");
const controller_generator_1 = require("./generators/controller.generator");
const crud_service_generator_1 = require("./generators/crud.service.generator");
const enum_generator_1 = require("./generators/enum.generator");
const input_generator_1 = require("./generators/input.generator");
const module_generator_1 = require("./generators/module.generator");
const nameGenerator_1 = require("./nameGenerator");
const writeFileSafely_1 = require("./utils/writeFileSafely");
const defaultOptions = {
    strict: false,
    dryRun: false,
    AutoGeneratedWarningText: '/*****    AUTO-GENERATED FILE - DO NOT MODIFY   *****/',
    schemaPath: '',
    GenerateServices: true,
    GenerateController: true,
    GenerateModule: true,
    GenerateInputs: false,
    GenerateInputSwagger: true,
    InputExportPath: 'data/inputs',
    InputSuffix: 'Input',
    InputValidatorPackage: 'class-validator',
    InputCreatePrefix: 'Create',
    InputUpdatePrefix: 'Update',
    CRUDAddExceptions: true,
    PrismaServiceImportPath: 'prisma/prisma.service',
    PrismaModuleName: 'PrismaModule',
    PrismaModuleImportPath: 'prisma/prisma.module',
    EnumPath: 'enums'
};
(0, generator_helper_1.generatorHandler)({
    onManifest() {
        console.log(`${constants_1.GENERATOR_NAME}:Registered`);
        return {
            version: package_json_1.version,
            defaultOutput: '../generated',
            prettyName: constants_1.GENERATOR_NAME,
        };
    },
    onGenerate: async (options) => {
        const configOverwrites = {
            schemaPath: options.schemaPath,
        };
        const settings = {
            ...defaultOptions,
            ...options.generator.config,
            ...configOverwrites,
        };
        const mainGenerator = new MainGenerator(options, settings);
        await mainGenerator.generateFiles();
    }
});
class MainGenerator {
    options;
    settings;
    writeFile;
    nameGenerator;
    constructor(options, settings) {
        this.options = options;
        this.settings = settings;
        this.writeFile = settings?.dryRun ? writeFileSafely_1.outputToConsole : writeFileSafely_1.writeFileSafely;
        this.nameGenerator = nameGenerator_1.NameGenerator.singleton;
        this.nameGenerator.basePath = options.generator.output?.value || 'gen';
    }
    async generateFiles() {
        for (const model of this.options.dmmf.datamodel.models) {
            if (this.settings?.GenerateServices)
                await this.generateServiceFile(model);
            if (this.settings.GenerateInputs)
                await this.generateInputFile(model);
            if (this.settings.GenerateController)
                await this.generateControllerFile(model);
            if (this.settings.GenerateModule)
                await this.generateModuleFile(model);
        }
        for (const tEnum of this.options.dmmf.datamodel.enums) {
            await this.generateEnumFile(tEnum);
        }
    }
    async generateEnumFile(tEnum) {
        let content = (0, enum_generator_1.generateEnum)(tEnum, this.settings);
        let filePath = this.nameGenerator.geFilePath(tEnum, 'enum');
        await this.writeFile(filePath, content);
    }
    async generateInputFile(model) {
        const inputGenerator = new input_generator_1.InputGenerator(this.settings, model);
        const inputContent = await inputGenerator.generateContent();
        const filePath = this.nameGenerator.geFilePath(model, 'controller');
        await this.writeFile(filePath, inputContent);
    }
    async generateServiceFile(model) {
        console.log(` > Generating Service for Model ${model.name}`);
        const serviceGenerator = new crud_service_generator_1.CrudServiceGenerator(this.settings, model);
        const crudServiceContent = await serviceGenerator.generateContent();
        const filePath = this.nameGenerator.geFilePath(model, 'service');
        await this.writeFile(filePath, crudServiceContent);
    }
    async generateControllerFile(model) {
        const controllerGenerator = new controller_generator_1.ControllerGenerator(this.settings, model);
        const controllerContent = await controllerGenerator.generateContent();
        const filePath = this.nameGenerator.geFilePath(model, 'controller');
        await this.writeFile(filePath, controllerContent);
    }
    async generateModuleFile(model) {
        const moduleGenerator = new module_generator_1.ModuleGenerator(model, this.settings);
        const content = moduleGenerator.generateContent();
        const filePath = this.nameGenerator.geFilePath(model, 'module');
        await this.writeFile(filePath, content);
    }
}
//# sourceMappingURL=generator.js.map