export const controllerStub = `
#{AutoGeneratedWarningText}

import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { #{ServiceName} } from './#{CrudServiceFileName}';
#{ImportGuardClass}

@Controller('#{model}')
export class #{ControllerClassName} {
  constructor(private readonly service: #{ServiceName}) {}

  #{GuardDecorator}
  @Post()
  create(@Body() #{moDel}CreateInput: Prisma.#{Model}CreateInput) {
    return this.service.create(#{moDel}CreateInput);
  }

  #{GuardDecorator}
  @Get()
  getAll() {
    return this.service.getAll();
  }

  #{GuardDecorator}
  @Post()
  getFiltered(@Body() data: Prisma.#{Model}FindManyArgs) {
    return this.service.getFiltered(data);
  }

  #{GuardDecorator}
  @Post()
  getUnique(@Body() body: Prisma.#{Model}FindUniqueOrThrowArgs) {
    return this.service.getUnique(body);
  }

  #{GuardDecorator}
  @Post()
  update(@Body() body: {where: Prisma.#{Model}WhereUniqueInput; data: Prisma.#{Model}UpdateInput}) {
    return this.service.update( body.where, body.data);
  }

  #{ByIdMethods}
  
}`;

export const controllerIdMethodsStub = `
#{GuardDecorator}
  @Get(':id')
  getById(@Param('id') id: string) {
    return this.service.getById(#{convertToInt}id);
  }

  #{GuardDecorator}
  @Patch(':id')
  updateById (@Param('id') id: string, @Body() data: Prisma.#{Model}UpdateInput) {
    return this.service.updateById(#{convertToInt}id, data);
  }

  #{GuardDecorator}
  @Delete(':id')
  deleteById(@Param('id') id: string) {
    return this.service.deleteById(#{convertToInt}id);
  }`