import { DMMF } from "@prisma/generator-helper";
import { StringFns } from "../../../shared/src/stringFns";
import { PrismaHelper } from "../helpers/prisma.helper";
import { GeneratorSettings } from "../interfaces/generator.interface";
import { NameGenerator } from "../nameGenerator";
import { controllerIdMethodsStub, controllerStub } from "../stubs/controller.stub";


export class ControllerGenerator {

    constructor(
        private settings: GeneratorSettings,
        private model: DMMF.Model
    ) { }

    public async generateContent() {
        let nameGen = NameGenerator.singleton;
        let content = controllerStub;
        content = content.replace(/#{AutoGeneratedWarningText}/g, this.settings.AutoGeneratedWarningText);

        // if the model has a unique ID field we insert '...byId' methods: #{convertToIntOperator}
        const idFieldAndType = PrismaHelper.getInstance().getIdFieldNameAndType(this.model);
        if (idFieldAndType) {
            const idMethodsContent = controllerIdMethodsStub.replace(/#{convertToInt}/g, idFieldAndType.type === 'number' ? '+' : '');
            content = content.replace(/#{ByIdMethods}/g, idMethodsContent);
        } else {
            content = content.replace(/#{ByIdMethods}/g, '');
        }

        content = content.replace(/#{ControllerClassName}/g, nameGen.getClassName(this.model, 'controller'));
        content = content.replace(/#{Model}/g, this.model.name);
        content = content.replace(/#{model}/g, this.model.name.toLowerCase());
        content = content.replace(/#{moDel}/g, StringFns.decapitalize(this.model.name));
        content = content.replace(/#{ServiceName}/g, nameGen.getClassName(this.model, 'service'));
        content = content.replace(/#{CrudServiceFileName}/g, nameGen.getFileName(this.model, 'service'));

        let guardImportContent: string, guardsContent: string;

        if (this.settings?.GuardClass) {
            guardImportContent = `import {${this.settings.GuardClass}} from '${this.settings.GuardImportPath}';`;
            guardsContent = `@UseGuards(${this.settings.GuardClass})`;
        } else {
            guardImportContent = '';
            guardsContent = '';
        }
        content = content.replace(/#{ImportGuardClass}/g, guardImportContent);
        content = content.replace(/#{GuardDecorator}/g, guardsContent);

        return content;
    }
}