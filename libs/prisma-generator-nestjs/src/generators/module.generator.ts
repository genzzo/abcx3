import { DMMF } from "@prisma/generator-helper";
import { GeneratorSettings } from "../interfaces/generator.interface";
import { NameGenerator } from "../nameGenerator";
import { importControllerStub, moduleStub } from "../stubs/module.stub";

export class ModuleGenerator {

    constructor(private model: DMMF.Model, private settings: GeneratorSettings) { }

    generateContent() {
        let nameGen = NameGenerator.singleton;
        let content = moduleStub;

        content = content.replace(/#{AutoGeneratedWarningText}/g, this.settings.AutoGeneratedWarningText);
        content = content.replace(/#{PrismaModuleName}/g, this.settings.PrismaModuleName!);
        content = content.replace(/#{PrismaModuleImportPath}/g, this.settings.PrismaModuleImportPath!);
        if (this.settings.GenerateController) {
            content = content.replace(/#{ImportControllerClass}/g, importControllerStub);
            content = content.replace(/#{ControllerName}/g, nameGen.getClassName(this.model, 'controller'));
            content = content.replace(/#{ControllerFileName}/g, nameGen.getFileName(this.model, 'controller'));
        } else {
            content = content.replace(/#{ImportControllerClass}/g, '');
            content = content.replace(/#{ControllerName}/g, '');
        }

        content = content.replace(/#{ServiceName}/g, nameGen.getClassName(this.model, 'service'));
        content = content.replace(/#{ServiceFileName}/g, nameGen.getFileName(this.model, 'service'));
        content = content.replace(/#{ModuleName}/g, nameGen.getClassName(this.model, 'module'));

        return content;
    }
}

/* export interface ModuleGeneratorArgs {
    settings: GeneratorSettings;
    model: DMMF.Model;
    moduleName: string;
    serviceName: string;
    serviceFileName: string;
} */
