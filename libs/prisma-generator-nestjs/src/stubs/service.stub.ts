export const ServiceStub = `
#{AutoGeneratedWarningText}

import {
    Injectable,
    InternalServerErrorException,
    NotFoundException,
} from '@nestjs/common';
import { Prisma, #{Model} #{RelatedFieldTypesImport} } from '@prisma/client';
import {
    PaginationInterface,
    PrismaService,
} from '#{PrismaServiceImportPath}';
#{NeverthrowImport}

@Injectable()
export class #{CrudServiceClassName} {
    constructor(protected readonly prismaService: PrismaService) {}

    getPrisma() {
        return this.prismaService;
    }

    async getAll(): Promise<#{Model}[] | Error> {
        try {
            const result = await this.prismaService.#{moDel}.findMany();
            return result;
        } catch (e) {
            return new InternalServerErrorException(\`Could not get #{Model} item\`);
        }
    }

    async create(data: Prisma.#{Model}CreateInput): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.create({ data: data });
            return result;
        } catch (e) {
            return new InternalServerErrorException(\`Could not create #{Model} item\`);
        }
    }

    async upsert({where, create, update}:{
        where: Prisma.#{Model}WhereUniqueInput,
        create: Prisma.#{Model}CreateInput,
        update: Prisma.#{Model}UpdateInput
    }): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.upsert({
                where,
                create,
                update
            });
            return result;
        } catch (e) {
            return new InternalServerErrorException('Could not create #{Model}');
        }
    }

    async getFiltered(filter?: Prisma.#{Model}FindManyArgs): Promise<#{Model}[] | Error> {
        try {
            const result = await this.prismaService.#{moDel}.findMany(filter);
            return result;
        }
        catch(e) {
            return new InternalServerErrorException('Could not get filtered #{Model} items');
        }
    }

    async getFilteredPage(filter?: Prisma.#{Model}FindManyArgs): Promise<PaginationInterface<#{Model}> | Error> {
        try {
            const [items, count] = await this.prismaService.$transaction([
                this.prismaService.#{moDel}.findMany(filter),
                this.prismaService.#{moDel}.count({ where: filter?.where }),
            ]);

            const take = filter?.take ? filter?.take : count;
            const skip = filter?.skip ? filter?.skip : 0;

            const result = {
                items: items,
                meta: {
                totalItems: count,
                items: items.length,
                totalPages: Math.ceil(count / take),
                page: skip / take + 1,
                }
            };
            return result;
        }
        catch(e) {
            return new InternalServerErrorException('Could not get #{Model} items.');
        }
    }

    async getUnique(uniqueArgs: Prisma.#{Model}FindUniqueOrThrowArgs): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.findUniqueOrThrow(uniqueArgs);
        return result;
            } catch(e) {
            return new NotFoundException(\`Get operation \${uniqueArgs} on #{Model} failed\`);
        }
    }

    async getLatest(): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.findFirst({
                orderBy: {
                    id: 'desc'
                }
            });
            return result;
        } catch (e) {
            return new InternalServerErrorException(
                \`Could not get latest #{Model}\`
            );
        }
    }

    async update({where, data}: Prisma.#{Model}UpdateArgs): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.update({
                where,
                data
            });
            return result;
        } catch (e) {
            return new InternalServerErrorException(\`Could not update #{Model} where \${where} with data \${data}\`);
        }
    }

    async delete(where: Prisma.#{Model}WhereUniqueInput): Promise<#{Model} | Error> {
        try {
            const result = await this.prismaService.#{moDel}.delete({ where });
            return result;
        } catch (e) {
            return new InternalServerErrorException(\`Could not delete #{Model} where \${where}\`);
        }
    }

    // get by id methods

    #{byIdMethods}

    // relation fields methods

    #{relationFieldMethods}

}
`;

export const NeverthrowImport = `import { err, ok, Result } from 'neverthrow';`;

export const crudRelationFieldStub = `
async get#{RelationFieldNameCapitalized}(where: Prisma.#{Model}WhereUniqueInput): Promise<#{RelationMethodReturnType} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.findUnique({
            where,
            include: { #{RelationFieldName} : true },
        });
        return result.#{RelationFieldName};
    } catch (e) {
        return new InternalServerErrorException(\`Could not get #{RelationFieldName} for #{Model}\`);
    }
}
`;

export const idMethods_neverThrow = `
async getById(#{idName}: #{idType}): Promise<#{Model} | Error> {
    try {
    const result = await this.prismaService.#{moDel}.findUniqueOrThrow({
        where: { #{idName} }
    });
    return result;
    } catch(e) {
    return new NotFoundException(\`#{Model} Resource \${id} was not found\`);
    }
}

async updateById(#{idName}: #{idType}, data: Prisma.#{Model}UpdateInput): Promise<#{Model} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.update({
            where: { #{idName} },
            data: data,
        });
        return result;
    } catch (e) {
        return new InternalServerErrorException(\`Could not update #{Model} Resource \${#{idName}}\`);
    }
}

async deleteById(#{idName}: #{idType}): Promise<#{Model} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.delete({ where: { #{idName} } });
        return result;
    } catch (e) {
        return new InternalServerErrorException(\`Could not delete #{Model} Resource \${#{idName}}\`);
    }
}
`;

