export const ServiceStub = `
#{AutoGeneratedWarningText}

import {
    Injectable,
    InternalServerErrorException,
    NotFoundException,
} from '@nestjs/common';
import { Prisma, #{Model} #{RelatedFieldTypesImport} } from '@prisma/client';
import {
    PrismaService,
} from '#{PrismaServiceImportPath}';
#{NeverthrowImport}

@Injectable()
export class #{ServiceClassName} {
    constructor(protected readonly prismaService: PrismaService) {}

    async getAll(modelFilter?: Prisma.#{Model}WhereInput): Promise<#{Model}[] | Error> {
        try {
            const result = await this.prismaService.#{moDel}.findMany({where: modelFilter});
            return result;
        } catch (e) {
            return new InternalServerErrorException(
                \`Could not get all #{Model}.\`
            );
        }
    }

    async getByFieldValues(fieldsAndValues: Record<string, number | string>, modelFilter?: Prisma.#{Model}WhereInput): Promise<#{Model} | Error> {
        const combinedFilter = this.combineFilters(fieldsAndValues, modelFilter);
        try {
            const result = await this.prismaService.#{moDel}.findFirst({
                where: combinedFilter
            });
            return result;
        } catch (error) {
            console.log(this.printObject(error));
            console.log('message: ', error?.message);
            return new InternalServerErrorException(
                \`Could not get one #{Model} by \${this.printObject(fieldsAndValues)}\`
            );
        }
    }

    async getManyByFieldValues(fieldsAndValues: Record<string, number | string>, modelFilter?: Prisma.#{Model}WhereInput): Promise<#{Model}[] | Error> {
        const combinedFilter = this.combineFilters(fieldsAndValues, modelFilter);
        try {
            const result = await this.prismaService.#{moDel}.findMany({
                where: combinedFilter
            });
            return result;
        } catch (error) {
            console.log(this.printObject(error));
            console.log('message: ', error?.message);
            return new InternalServerErrorException(
                \`Could not get any #{Model} by \${this.printObject(fieldsAndValues)}\`
            );
        }
    }

    combineFilters(
		fieldsAndValues: Record<string, number | string>,
		modelFilter: Prisma.#{Model}WhereInput,
	): Prisma.#{Model}WhereInput {
		let combinedFilter: Prisma.#{Model}WhereInput;
		if (modelFilter) {
			combinedFilter = {
				AND: [...(modelFilter?.AND as Prisma.#{Model}WhereInput[]), fieldsAndValues]
			};
			if (modelFilter?.OR) {
				combinedFilter.OR = modelFilter?.OR;
			}
			if (modelFilter?.NOT) {
				combinedFilter.NOT = modelFilter?.NOT;
			}
		} else {
			combinedFilter = fieldsAndValues;
		}
		return combinedFilter;
	}

    // get by id methods

    #{byIdMethods}

    // relation fields methods

    #{relationFieldMethods}

    printObject = (obj: any) => JSON.stringify(obj, null, 2);

}
`;

export const NeverthrowImport = `import { err, ok, Result } from 'neverthrow';`;

export const crudRelationFieldStub = `
async get#{RelationFieldNameCapitalized}(where: Prisma.#{Model}WhereUniqueInput): Promise<#{RelationMethodReturnType} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.findUnique({
            where,
            include: { #{RelationFieldName} : true },
        });
        return result.#{RelationFieldName};
    } catch (e) {
        return new InternalServerErrorException(\`Could not get #{RelationFieldName} for #{Model}\`);
    }
}
`;

export const idMethods_neverThrow = `
async getById(#{idName}: #{idType}): Promise<#{Model} | Error> {
    try {
    const result = await this.prismaService.#{moDel}.findUniqueOrThrow({
        where: { #{idName} }
    });
    return result;
    } catch(e) {
    return new NotFoundException(\`#{Model} Resource \${id} was not found\`);
    }
}

async updateById(#{idName}: #{idType}, data: Prisma.#{Model}UpdateInput): Promise<#{Model} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.update({
            where: { #{idName} },
            data: data,
        });
        return result;
    } catch (e) {
        return new InternalServerErrorException(\`Could not update #{Model} Resource \${#{idName}}\`);
    }
}

async deleteById(#{idName}: #{idType}): Promise<#{Model} | Error> {
    try {
        const result = await this.prismaService.#{moDel}.delete({ where: { #{idName} } });
        return result;
    } catch (e) {
        return new InternalServerErrorException(\`Could not delete #{Model} Resource \${#{idName}}\`);
    }
}
`;

