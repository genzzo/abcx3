"use strict";var Y=Object.create;var S=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var ee=(n,e,t)=>e in n?S(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var te=(n,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of X(e))!_.call(n,a)&&a!==t&&S(n,a,{get:()=>e[a],enumerable:!(r=Q(e,a))||r.enumerable});return n};var N=(n,e,t)=>(t=n!=null?Y(Z(n)):{},te(e||!n||!n.__esModule?S(t,"default",{value:n,enumerable:!0}):t,n));var f=(n,e,t)=>(ee(n,typeof e!="symbol"?e+"":e,t),t);var V=require("@prisma/generator-helper");var I=N(require("fs")),G=N(require("path"));async function x(n,e){I.mkdirSync(G.dirname(n),{recursive:!0}),I.writeFileSync(n,e)}async function E(n,e){console.log(e)}var o=class{static decapitalizeFileName(e,t){return this.decapitalize(e)+"."+t}static decapitalize(e){return this.transformFirstCharCase(e,"toLowerCase")}static capitalize(e){return this.transformFirstCharCase(e,"toUpperCase")}static transformFirstCharCase(e,t){return e==null||e.length===0?"":(t==="toLowerCase"?e[0].toLowerCase():e[0].toUpperCase())+e.substring(1)}};var A="1.0.0";var w="prisma-generator-nestjs";var i=class{constructor(e,t,r=""){this.name=e;this.importFrom=t;this.options=r;this.name.startsWith("@")&&(this.name=this.name.substring(1))}generateContent(){return`@${this.name}(${this.options})`}};var d=class{primitiveTypeMap(e){return{bigint:{tsType:"BigInt",validators:[new i("IsNumber",e)]},boolean:{tsType:"boolean",validators:[new i("IsBoolean",e)]},bytes:{tsType:"Buffer",validators:[]},datetime:{tsType:"Date",validators:[new i("IsISO8601",e)]},decimal:{tsType:"number",validators:[new i("IsNumber",e)]},float:{tsType:"number",validators:[new i("IsNumber",e)]},int:{tsType:"number",validators:[new i("IsInt",e)]},json:{tsType:"object",validators:[new i("IsObject",e)]},string:{tsType:"string",validators:[new i("IsString",e)]}}}static getInstance(){return d.instance||(d.instance=new d),d.instance}getMapTypeFromDMMF(e,t="class-validator"){let a=this.primitiveTypeMap(t)[e.type.toLowerCase()];return a||{tsType:e.type,validators:[new i("IsDefined",t)]}}generateSwaggerDecoratorsFromDMMF(e){let t=[];return e.isRequired?t.push(new i("ApiProperty","@nestjs/swagger")):t.push(new i("ApiProperty","@nestjs/swagger",JSON.stringify({required:!1}))),t}getIdFieldNameAndType(e){let t=e.fields.find(r=>r.isId===!0);return t?{name:t.name,type:this.getMapTypeFromDMMF(t).tsType}:null}modelContainsObjectReference=e=>e.fields.some(t=>t.kind==="object");getUniqueInputPropertyName(e){let t=e.primaryKey;if(t?.fields){let r=t.fields.reduce((a,s)=>a+"_"+s,"");return r=r.substring(1),r}else return null}getUniqueInputType(e){let t=e.primaryKey;return t?.fields?t.fields.reduce((a,s)=>a+this.capitalize(s),""):null}capitalize(e){return e.length===0?e:e.length===1?e.toUpperCase():e[0].toUpperCase()+e.substring(1)}},p=d;f(p,"instance");var ae=require("path"),g=class{basePath="gen";static get singleton(){return g._singleton||(g._singleton=new g),g._singleton}constructor(){}getClassName=(e,t)=>e.name+o.capitalize(t);getFileName=(e,t)=>o.decapitalizeFileName(e.name,t);geFilePath=(e,t)=>ae.join(this.basePath,this.getModelPath(e),this.getFileName(e,t)+".ts");getModelPath=e=>o.decapitalize(e.name)},l=g;f(l,"_singleton");var U=`
#{AutoGeneratedWarningText}

import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { #{ServiceName} } from './#{CrudServiceFileName}';
#{ImportGuardClass}

@Controller('#{model}')
export class #{ControllerClassName} {
  constructor(private readonly service: #{ServiceName}) {}

  #{GuardDecorator}
  @Post()
  create(@Body() #{moDel}CreateInput: Prisma.#{Model}CreateInput) {
    return this.service.create(#{moDel}CreateInput);
  }

  #{GuardDecorator}
  @Get()
  getAll() {
    return this.service.getAll();
  }

  #{GuardDecorator}
  @Post()
  getFiltered(@Body() data: Prisma.#{Model}FindManyArgs) {
    return this.service.getFiltered(data);
  }

  #{GuardDecorator}
  @Post()
  getUnique(@Body() body: Prisma.#{Model}FindUniqueOrThrowArgs) {
    return this.service.getUnique(body);
  }

  #{GuardDecorator}
  @Post()
  update(@Body() body: {where: Prisma.#{Model}WhereUniqueInput; data: Prisma.#{Model}UpdateInput}) {
    return this.service.update( body.where, body.data);
  }

  #{ByIdMethods}
}`,O=`
#{GuardDecorator}
  @Get(':id')
  getById(@Param('id') id: string) {
    return this.service.getById(#{convertToInt}id);
  }

  #{GuardDecorator}
  @Patch(':id')
  updateById (@Param('id') id: string, @Body() data: Prisma.#{Model}UpdateInput) {
    return this.service.updateById(#{convertToInt}id, data);
  }

  #{GuardDecorator}
  @Delete(':id')
  deleteById(@Param('id') id: string) {
    return this.service.deleteById(#{convertToInt}id);
  }`;var y=class{constructor(e,t){this.settings=e;this.model=t}async generateContent(){let e=l.singleton,t=U;t=t.replace(/#{AutoGeneratedWarningText}/g,this.settings.AutoGeneratedWarningText);let r=p.getInstance().getIdFieldNameAndType(this.model);if(r){let u=O.replace(/#{convertToInt}/g,r.type==="number"?"+":"");t=t.replace(/#{ByIdMethods}/g,u)}else t=t.replace(/#{ByIdMethods}/g,"");t=t.replace(/#{ControllerClassName}/g,e.getClassName(this.model,"controller")),t=t.replace(/#{Model}/g,this.model.name),t=t.replace(/#{model}/g,this.model.name.toLowerCase()),t=t.replace(/#{moDel}/g,o.decapitalize(this.model.name)),t=t.replace(/#{ServiceName}/g,e.getClassName(this.model,"service")),t=t.replace(/#{CrudServiceFileName}/g,e.getFileName(this.model,"service"));let a,s;return this.settings?.GuardClass?(a=`import {${this.settings.GuardClass}} from '${this.settings.GuardImportPath}';`,s=`@UseGuards(${this.settings.GuardClass})`):(a="",s=""),t=t.replace(/#{ImportGuardClass}/g,a),t=t.replace(/#{GuardDecorator}/g,s),t}};var B=`
#{AutoGeneratedWarningText}

import {
    Injectable,
    InternalServerErrorException,
    NotFoundException,
} from '@nestjs/common';
import { Prisma, #{Model} } from '@prisma/client';
import {
    PaginationInterface,
    PrismaService,
} from '#{PrismaServiceImportPath}';
import { err, ok, Result } from 'neverthrow';

@Injectable()
export class #{CrudServiceClassName} {
    constructor(private readonly prismaService: PrismaService) {}

    getPrisma() {
        return this.prismaService;
    }

    async create(data: Prisma.#{Model}CreateInput): Promise<Result<#{Model}, Error>> {
        try {
            const result = await this.prismaService.#{moDel}.create({ data: data });
            return ok(result);
        } catch (e) {
            return err(new InternalServerErrorException(\`Could not create #{Model} Resource.\`));
        }
    }

    getAll = async () => await this.getFiltered();

    async getFiltered(
        filter?: Prisma.#{Model}FindManyArgs,
    ): Promise<Result<PaginationInterface<#{Model}>, Error>> {
        try {
            const [items, count] = await this.prismaService.$transaction([
                this.prismaService.#{moDel}.findMany(filter),
                this.prismaService.#{moDel}.count({ where: filter?.where }),
            ]);

            const take = filter?.take ? filter?.take : count;
            const skip = filter?.skip ? filter?.skip : 0;

            return ok({
                items: items,
                meta: {
                totalItems: count,
                items: items.length,
                totalPages: Math.ceil(count / take),
                page: skip / take + 1,
                },
            });
        }
        catch(e) {
            return err(new InternalServerErrorException(\`Could not get #{Model} Resources.\`));
        }
    }

    async getUnique(uniqueArgs: Prisma.#{Model}FindUniqueOrThrowArgs): Promise<Result<#{Model}, Error>> {
        try {
            const result = await this.prismaService.#{moDel}.findUniqueOrThrow(uniqueArgs);
        return ok(result);
            } catch(e) {
            return err(new NotFoundException(\`Get operation \${uniqueArgs} on #{Model} failed.\`));
        }
    }

    async update(
        where: Prisma.#{Model}WhereUniqueInput,
        data: Prisma.#{Model}UpdateInput,
    ): Promise<Result<#{Model}, Error>> {
        try {
            const result = await this.prismaService.#{moDel}.update({
                where,
                data
            });
            return ok(result);
        } catch (e) {
            return err(new InternalServerErrorException(
                \`Could not update #{Model} where \${where} with data \${data}.\`,
            ));
        }
    }

    async delete(where: Prisma.#{Model}WhereUniqueInput): Promise<Result<#{Model}, Error>> {
        try {
            const result = await this.prismaService.#{moDel}.delete({ where });
            return ok(result);
        } catch (e) {
            return err(new InternalServerErrorException(
                \`Could not delete #{Model} where \${where}.\`,
            ));
        }
    }
    #{byIdMethods}
}
`,k=`
async getById(#{idName}: #{idType}): Promise<Result<#{Model}, Error>> {
    try {
    const result = await this.prismaService.#{moDel}.findUniqueOrThrow({
        where: { #{idName} }
    });
    return ok(result);
    } catch(e) {
    return err(new NotFoundException(\`#{Model} Resource \${id} was not found.\`));
    }
}

async updateById(#{idName}: #{idType}, data: Prisma.#{Model}UpdateInput): Promise<Result<#{Model}, Error>> {
    try {
        const result = await this.prismaService.#{moDel}.update({
            where: { #{idName} },
            data: data,
        });
        return ok(result);
    } catch (e) {
        return err(new InternalServerErrorException(
            \`Could not update #{Model} Resource \${#{idName}}.\`,
        ));
    }
}

async deleteById(#{idName}: #{idType}): Promise<Result<#{Model}, Error>> {
    try {
        const result = await this.prismaService.#{moDel}.delete({ where: { #{idName} } });
        return ok(result);
    } catch (e) {
        return err(new InternalServerErrorException(
            \`Could not delete #{Model} Resource \${#{idName}}.\`,
    ));
    }
}
`,$=`/*
-----------------------------------------------------
THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
-----------------------------------------------------
*/

import { Injectable } from '@nestjs/common';
import { Prisma, #{Model} } from '@prisma/client';
import {
  PaginationInterface,
  PrismaService,
} from '@prisma-utils/nestjs-prisma';

@Injectable()
export class #{CrudServiceClassName} {
  constructor(private readonly prismaService: PrismaService) {}

  getPrisma() {
    return this.prismaService;
  }

  async getAll(
    filter?: Prisma.#{Model}FindManyArgs,
  ): Promise<PaginationInterface<#{Model}>> {
    const [items, count] = await this.prismaService.$transaction([
      this.prismaService.#{moDel}.findMany(filter),
      this.prismaService.#{moDel}.count({ where: filter?.where }),
    ]);

    const take = filter?.take ? filter?.take : count;
    const skip = filter?.skip ? filter?.skip : 0;

    return {
      items: items,
      meta: {
        totalItems: count,
        items: items.length,
        totalPages: Math.ceil(count / take),
        page: skip / take + 1,
      },
    };
  }

  async getById(#{idName}: #{idType}): Promise<#{Model}> {
    const result = await this.prismaService.#{moDel}.findUniqueOrThrow({
      where: { #{idName} }
    });
    return result;
  }

  async create(data: Prisma.#{Model}CreateInput): Promise<#{Model}> {
    const result = await this.prismaService.#{moDel}.create({ data: data });
    return result;
  }

  async update(
    #{idName}: #{idType},
    data: Prisma.#{Model}UpdateInput,
  ): Promise<#{Model}> {
    return await this.prismaService.#{moDel}.update({
      where: { #{idName} },
      data: data,
    });
  }

  async delete(#{idName}: #{idType}): Promise<#{Model}> {
    return await this.prismaService.#{moDel}.delete({ where: { #{idName} } });
  }
}
`;var R=N(require("path")),j=require("fs");var F=class{constructor(e,t){this.settings=e;this.model=t;this.prismaHelper=p.getInstance()}prismaHelper;async generateContent(){let e=l.singleton,t;if(this.settings?.CRUDAddExceptions?t=B:t=$,t=t.replace(/#{AutoGeneratedWarningText}/g,this.settings.AutoGeneratedWarningText),this.settings.CRUDStubFile){let a=R.join(this.settings.schemaPath,this.settings.CRUDStubFile);console.log(`Loading Stubs from ${a}`),t=(await j.promises.readFile(a,{encoding:"utf-8"})).toString()}t=t.replace(/#{PrismaServiceImportPath}/g,this.settings.PrismaServiceImportPath);let r=this.prismaHelper.getIdFieldNameAndType(this.model);return r?(t=t.replace(/#{byIdMethods}/g,k),t=this.replaceInIdMethods(t,r)):t=t.replace(/#{byIdMethods}/g,""),t=t.replace(/#{CrudServiceClassName}/g,e.getClassName(this.model,"service")),t=t.replace(/#{Model}/g,this.model.name),t=t.replace(/#{MODEL}/g,this.model.name.toUpperCase()),t=t.replace(/#{model}/g,this.model.name.toLowerCase()),t=t.replace(/#{moDel}/g,o.decapitalize(this.model.name)),t}replaceInIdMethods(e,t){return e=e.replace(/#{idName}/g,t.name),e=e.replace(/#{idType}/g,t.type),e=e.replace(/#{uniqueInputType}/g,`Prisma.${this.model.name}WhereUniqueInput`),e}};var q=({name:n,values:e},t)=>{let r=e.map(({name:a})=>`${a}="${a}"`).join(`,
`);return`
${t.AutoGeneratedWarningText}

enum ${n} { 
${r}
 }`};var W=`
#{AutoGeneratedWarningText}

#{Imports}

export class #{NameBaseInput} #{ParentClass} {
  #{Fields}
}

#{CreateClassStub}
#{UpdateClassStub}
`,H=`
#{Decorators}
#{FieldName}#{Operator}: #{Type};
`;var L=`
export class #{NameCreateInput} extends OmitType(#{NameParentInput}, [#{OmitFields}] as const) {}
`,z=`
export class #{NameUpdateInput} extends PartialType(#{NameParentInput}) {}
`;var C=class{constructor(e,t){this.settings=e;this.model=t}fieldDecorators=[];omitFields=[];generateContent(){let e=this.generateBaseInput();e=e.replace(/#{AutoGeneratedWarningText}/g,this.settings.AutoGeneratedWarningText);let t=this.generateCreateInput();e=e.replace(/#{CreateClassStub}/g,t);let r=this.generateUpdateInput();return e=e.replace(/#{UpdateClassStub}/g,r),e=e.replace(/#{Imports}/g,this.generateImportStatements()),e}getBaseInputClassName(){return`${this.model.name}${this.settings.InputSuffix}`}getCreateInputClassName(){return`${this.settings.InputCreatePrefix}${this.model.name}${this.settings.InputSuffix}`}getUpdateInputClassName(){return`${this.settings.InputUpdatePrefix}${this.model.name}${this.settings.InputSuffix}`}generateBaseInput(){let e=W,t=this.getBaseInputClassName();e=e.replace(/#{NameBaseInput}/g,t),this.settings.InputParentClass&&(e=e.replace(/#{ParentClass}/g,`extends ${this.settings.InputParentClass}`)),this.settings.InputParentClassPath&&this.addDecoratorToImport(new i(this.settings.InputParentClass+"",this.settings.InputParentClassPath+"")),e=e.replace(/#{ParentClass}/g,"");let r="";for(let a of this.model.fields){let s=this.generateFieldContent(a);r=r+s}return e=e.replace(/#{Fields}/g,r),e}generateCreateInput(){let e=L,t=this.getBaseInputClassName(),r=this.getCreateInputClassName();e=e.replace(/#{NameParentInput}/g,t),e=e.replace(/#{NameCreateInput}/g,r);let a=this.omitFields.map(s=>`'${s}'`).join(",");return e=e.replace(/#{OmitFields}/g,a),this.addDecoratorToImport(new i("OmitType","@nestjs/swagger")),e}generateUpdateInput(){let e=z,t=this.getCreateInputClassName(),r=this.getUpdateInputClassName();return e=e.replace(/#{NameParentInput}/g,t),e=e.replace(/#{NameUpdateInput}/g,r),this.addDecoratorToImport(new i("PartialType","@nestjs/swagger")),e}generateFieldContent(e){let t=H;t=t.replace(/#{FieldName}/g,e.name);let r=p.getInstance().getMapTypeFromDMMF(e,this.settings.InputValidatorPackage),a=r.tsType,s=r.validators;t=t.replace(/#{Type}/g,a);let u="";if(e.isRequired===!1){t=t.replace(/#{Operator}/g,"?");let m=new i("IsOptional",this.settings.InputValidatorPackage);this.addDecoratorToImport(m),u=m.generateContent()}else this.settings.strict?t=t.replace(/#{Operator}/g,"!"):t=t.replace(/#{Operator}/g,"");let M="";if(this.settings.GenerateInputSwagger){let m=p.getInstance().generateSwaggerDecoratorsFromDMMF(e);for(let c of m)this.addDecoratorToImport(c);M=m.map(c=>c.generateContent()).join(`
`)}let h="";for(let m of s)this.addDecoratorToImport(m),h=h+m.generateContent();let v=e.documentation,P="";if(v){let m=this.parseDocumentation(e);for(let c of m){if(c.name==="Omit"){this.omitFields.push(e.name);continue}if(c.name==="Relation"){this.omitFields.push(e.name);continue}if(c.name==="RelationId"){this.omitFields.push(e.name);continue}P=P+c.generateContent(),this.addDecoratorToImport(c)}}let T="";return T=M+u+h+P,t=t.replace(/#{Decorators}/g,T),t}addDecoratorToImport(e){let t=!1;for(let r of this.fieldDecorators)if(e.name===r.name&&e.importFrom===r.importFrom){t=!0;break}t===!1&&this.fieldDecorators.push(e)}generateImportStatements(){let e="";for(let t of this.fieldDecorators)e=`${e}import {${t.name}} from '${t.importFrom}';
`;return e}parseDocumentation(e){let t=e.documentation||"";t=t.replace(/(\r\n|\n|\r)/gm," ");let r=t.split(" "),a=[];for(let s of r){let u=s.indexOf("("),M=s.substring(u+1,s.lastIndexOf(")")),h=s.substring(0,u),v=new i(h,this.settings.InputValidatorPackage,M);a.push(v)}return a}};var K=`
#{AutoGeneratedWarningText}

import { Module } from '@nestjs/common';
import { #{ServiceName} } from './#{ServiceFileName}';
import { #{ControllerName} } from './#{ControllerFileName}';
import { #{PrismaModuleName} } from '#{PrismaModuleImportPath}';

@Module({
  controllers: [#{ControllerName}],
  providers: [#{ServiceName}],
  imports: [#{PrismaModuleName}]
})
export class #{Model}Module {}`;var D=class{constructor(e,t){this.model=e;this.settings=t}generateContent(){let e=l.singleton,t=K;return t=t.replace(/#{AutoGeneratedWarningText}/g,this.settings.AutoGeneratedWarningText),t=t.replace(/#{PrismaModuleName}/g,this.settings.PrismaModuleName),t=t.replace(/#{PrismaModuleImportPath}/g,this.settings.PrismaModuleImportPath),t=t.replace(/#{ControllerName}/g,e.getClassName(this.model,"controller")),t=t.replace(/#{ControllerFileName}/g,e.getFileName(this.model,"controller")),t=t.replace(/#{ServiceName}/g,e.getClassName(this.model,"service")),t=t.replace(/#{ServiceFileName}/g,e.getFileName(this.model,"service")),t=t.replace(/#{Model}/g,this.model.name),t}};var J=require("prettier"),ne={strict:!1,dryRun:!1,AutoGeneratedWarningText:"/*****    AUTO-GENERATED FILE - DO NOT MODIFY   *****/",schemaPath:"",GenerateServices:!0,GenerateController:!0,GenerateModule:!0,GenerateInputs:!1,GenerateInputSwagger:!0,InputExportPath:"data/inputs",InputSuffix:"Input",InputValidatorPackage:"class-validator",InputCreatePrefix:"Create",InputUpdatePrefix:"Update",CRUDAddExceptions:!0,PrismaServiceImportPath:"prisma/prisma.service",PrismaModuleName:"PrismaModule",PrismaModuleImportPath:"prisma/prisma.module",EnumPath:"enums"};(0,V.generatorHandler)({onManifest(){return console.log(`${w}:Registered`),{version:A,defaultOutput:"../generated",prettyName:w}},onGenerate:async n=>{let e={schemaPath:n.schemaPath},t={...ne,...n.generator.config,...e};await new b(n,t).generateFiles()}});var b=class{constructor(e,t){this.options=e;this.settings=t;this.writeFile=t?.dryRun?async(r,a)=>await E(r,this.formatContent(r,a)):async(r,a)=>await x(r,this.formatContent(r,a)),this.nameGenerator=l.singleton,this.nameGenerator.basePath=e.generator.output?.value||"gen"}writeFile;nameGenerator;formatContent(e,t){return e.match(/.ts$/)?(0,J.format)(t,{useTabs:!0,tabWidth:4,parser:"typescript"}):t}async generateFiles(){for(let e of this.options.dmmf.datamodel.models)this.settings?.GenerateServices&&await this.generateServiceFile(e),this.settings.GenerateInputs&&await this.generateInputFile(e),this.settings.GenerateController&&await this.generateControllerFile(e),this.settings.GenerateModule&&await this.generateModuleFile(e);for(let e of this.options.dmmf.datamodel.enums)await this.generateEnumFile(e)}async generateEnumFile(e){let t=q(e,this.settings),r=this.nameGenerator.geFilePath(e,"enum");await this.writeFile(r,t)}async generateInputFile(e){let r=await new C(this.settings,e).generateContent(),a=this.nameGenerator.geFilePath(e,"controller");await this.writeFile(a,r)}async generateServiceFile(e){console.log(` > Generating Service for Model ${e.name}`);let r=await new F(this.settings,e).generateContent(),a=this.nameGenerator.geFilePath(e,"service");await this.writeFile(a,r)}async generateControllerFile(e){let r=await new y(this.settings,e).generateContent(),a=this.nameGenerator.geFilePath(e,"controller");await this.writeFile(a,r)}async generateModuleFile(e){let r=new D(e,this.settings).generateContent(),a=this.nameGenerator.geFilePath(e,"module");await this.writeFile(a,r)}};
